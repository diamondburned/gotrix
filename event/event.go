package event

import (
	"encoding/json"

	"github.com/diamondburned/gotrix/matrix"
)

// StrippedEvent represents an event that has been stripped.
// This allows the client to display a room state correctly without its full timeline.
//
// It has the Type, Content, StateKey and Sender field.
type StrippedEvent RawEvent

// RawEvent is an instance of event that has not been parsed.
type RawEvent json.RawMessage

// EventInfo contains information present in all events.
type EventInfo struct {
	// Raw is the raw event as the event was received.
	Raw  RawEvent `json:"-"`
	Type Type     `json:"type"`
}

// EventInfo returns itself so it can be embedded into a struct and allow the struct to implement Event.
func (e *EventInfo) Info() *EventInfo {
	return e
}

// UnsignedData contains data controlled by the homeserver and is therefore not signed.
type UnsignedData struct {
	// Age is the time in milliseconds that has elapsed since the event was sent.
	// It is generated by local homeserver and may be incorrect if either server's
	// time is out of sync.
	Age matrix.Duration `json:"age,omitempty"`
	// RedactReason is the event that redacted this event, if any.
	RedactReason RawEvent `json:"redacted_because,omitempty"`
	// TransactionID is the client-supplied transaction ID, if the client being given the event
	// is the same one which sent it.
	TransactionID string `json:"transaction_id,omitempty"`
	// PrevContent is the previous content for this event. If there is no previous content, this
	// key will be missing.
	PrevContent json.RawMessage `json:"prev_content,omitempty"`
}

// RoomEventInfo contains information present in all room events and state events.
type RoomEventInfo struct {
	EventInfo

	ID               matrix.EventID   `json:"event_id,omitempty"`
	Sender           matrix.UserID    `json:"sender,omitempty"`
	OriginServerTime matrix.Timestamp `json:"origin_server_ts,omitempty"`
	RoomID           matrix.RoomID    `json:"room_id,omitempty"` // NOT included on `/sync` events.
	Unsigned         UnsignedData     `json:"unsigned,omitempty"`
}

// RoomEventInfo returns itself so it can be embedded into a struct and allow the struct to implement RoomEvent.
func (r *RoomEventInfo) RoomInfo() *RoomEventInfo {
	return r
}

// StateEventInfo contains information present in all state events.
type StateEventInfo struct {
	RoomEventInfo

	StateKey    string          `json:"state_key,omitempty"`
	PrevContent json.RawMessage `json:"prev_content,omitempty"` // Optional previous content, if available.
}

// StateEventInfo returns itself so it can be embedded into a struct and allow the struct to implement StateEvent.
func (s *StateEventInfo) StateInfo() *StateEventInfo {
	return s
}

// Event is a parsed instance of events in Matrix.
type Event interface {
	Info() *EventInfo
}

// RoomEvent is an event that is recorded in history and is not one-off.
// Typing is not a RoomEvent for example.
type RoomEvent interface {
	Info() *EventInfo
	RoomInfo() *RoomEventInfo
}

// StateEvent is an event that records the change of a state.
type StateEvent interface {
	Info() *EventInfo
	RoomInfo() *RoomEventInfo
	StateInfo() *StateEventInfo
}

// Supporting JSON functions:

// MarshalJSON returns the raw event itself.
func (r RawEvent) MarshalJSON() ([]byte, error) {
	return json.RawMessage(r).MarshalJSON()
}

// UnmarshalJSON sets *r to a copy of the data.
func (r *RawEvent) UnmarshalJSON(msg []byte) error {
	return (*json.RawMessage)(r).UnmarshalJSON(msg)
}

// MarshalJSON returns the stripped event itself.
func (r StrippedEvent) MarshalJSON() ([]byte, error) {
	return json.RawMessage(r).MarshalJSON()
}

// UnmarshalJSON sets *r to a copy of the data.
func (r *StrippedEvent) UnmarshalJSON(msg []byte) error {
	return (*json.RawMessage)(r).UnmarshalJSON(msg)
}
